{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MARSH documentation! MARSH stands for Modular Architecture for Reconfigurable Simulation of Helicopters. It is a system for connecting loosely coupled programs into a research flight simulator. Acknowledgements This software is developed in Department of Aerospace Science and Technology of Politecnico di Milano.","title":"Home"},{"location":"#welcome-to-marsh-documentation","text":"MARSH stands for Modular Architecture for Reconfigurable Simulation of Helicopters. It is a system for connecting loosely coupled programs into a research flight simulator.","title":"Welcome to MARSH documentation!"},{"location":"#acknowledgements","text":"This software is developed in Department of Aerospace Science and Technology of Politecnico di Milano.","title":"Acknowledgements"},{"location":"documentation/","text":"Documentation Documentation for all projects under MARSH-Sim. All sources for these pages are in a GitHub repository . It is set up to automatically build the documentation on every commit on GitHub servers. The public version at marsh-sim.github.io is updated every time the main branch is changed, the actual files served are from gh-pages . Local installation The pages can be built into HTML and other formats using Python. A virtual environment is recommended to avoid mixing this documentation with system packages. The following commands can be used for Linux: python3 -m venv venv source venv/bin/activate pip install -r requirements.txt For users on Windows, only the line to activate the virtual environment changes to: ./venv/Scripts/activate Usage Once a local installation is complete, the pages can be re-built live with: mkdocs serve Contributing Content is written in Markdown and built to HTML with MkDocs . Markdown files should preferably be formatted with markdownlint extension for VS Code . Recommended resources Make a Readme Readme Driven Development More Software Projects need Defenses of Design Defense of Design The goal for this setup of the documentation was to make it simple to update to users who come from aerospace engineering background and may not be familiar with the web technologies at large. A single documentation for all related projects was chosen to simplify navigation, allow easier cross linking between different concepts, and make it easier to search. The web pages are generated with MkDocs, because it uses Python which most colleagues already know. The alternatives used by related projects like GitBook (for MAVLink Dev Guide) are not free anymore, and VuePress (for PX4) requires NodeJS. Initially the more popular Sphinx was chosen, but didn't play nicely with Markdown files. This was deemed more important, since we already use it for a README.md file in every repository, is much more popular than reStructured Text, and has simpler syntax. Hosting the page through GitHub Pages and building through GitHub Actions mean there are no dedicated servers needed to be maintained by users. A fully open-source solution independent of a specific for-profit company would be preferred, but at least this can serve as introduction to contributing to other software outside of the University. License Content in this documentation is licensed under Creative Commons Attribution 4.0","title":"Documentation"},{"location":"documentation/#documentation","text":"Documentation for all projects under MARSH-Sim. All sources for these pages are in a GitHub repository . It is set up to automatically build the documentation on every commit on GitHub servers. The public version at marsh-sim.github.io is updated every time the main branch is changed, the actual files served are from gh-pages .","title":"Documentation"},{"location":"documentation/#local-installation","text":"The pages can be built into HTML and other formats using Python. A virtual environment is recommended to avoid mixing this documentation with system packages. The following commands can be used for Linux: python3 -m venv venv source venv/bin/activate pip install -r requirements.txt For users on Windows, only the line to activate the virtual environment changes to: ./venv/Scripts/activate","title":"Local installation"},{"location":"documentation/#usage","text":"Once a local installation is complete, the pages can be re-built live with: mkdocs serve","title":"Usage"},{"location":"documentation/#contributing","text":"Content is written in Markdown and built to HTML with MkDocs . Markdown files should preferably be formatted with markdownlint extension for VS Code .","title":"Contributing"},{"location":"documentation/#recommended-resources","text":"Make a Readme Readme Driven Development More Software Projects need Defenses of Design","title":"Recommended resources"},{"location":"documentation/#defense-of-design","text":"The goal for this setup of the documentation was to make it simple to update to users who come from aerospace engineering background and may not be familiar with the web technologies at large. A single documentation for all related projects was chosen to simplify navigation, allow easier cross linking between different concepts, and make it easier to search. The web pages are generated with MkDocs, because it uses Python which most colleagues already know. The alternatives used by related projects like GitBook (for MAVLink Dev Guide) are not free anymore, and VuePress (for PX4) requires NodeJS. Initially the more popular Sphinx was chosen, but didn't play nicely with Markdown files. This was deemed more important, since we already use it for a README.md file in every repository, is much more popular than reStructured Text, and has simpler syntax. Hosting the page through GitHub Pages and building through GitHub Actions mean there are no dedicated servers needed to be maintained by users. A fully open-source solution independent of a specific for-profit company would be preferred, but at least this can serve as introduction to contributing to other software outside of the University.","title":"Defense of Design"},{"location":"documentation/#license","text":"Content in this documentation is licensed under Creative Commons Attribution 4.0","title":"License"},{"location":"node_development/","text":"Node development Every component of the simulator should be a separate node. The nodes have to publish a HEARTBEAT message according to Heartbeat/Connection Protocol . For any node-specific feature the workflow is as follows: Check if there is already a relevant convention for a feature in Microservices section of Dev Guide If nothing was found, search the Common Message Set Read documentation for the service: e.g. Parameter Protocol Read documentation for specific messages: e.g. SIM_STATE (#108)","title":"Node Development"},{"location":"node_development/#node-development","text":"Every component of the simulator should be a separate node. The nodes have to publish a HEARTBEAT message according to Heartbeat/Connection Protocol . For any node-specific feature the workflow is as follows: Check if there is already a relevant convention for a feature in Microservices section of Dev Guide If nothing was found, search the Common Message Set Read documentation for the service: e.g. Parameter Protocol Read documentation for specific messages: e.g. SIM_STATE (#108)","title":"Node development"},{"location":"rationale/","text":"Project rationale The following section is mostly excerpts from the presentations done in the design phase of the system: Proposed options for the simulator architecture Simulator architecture comparison Standard selection for simulator integration Objectives Integrate available hardware and software resources to provide flight simulation for the following projects: Rotorcraft-Pilot Coupling Manned-UnManned Teaming (MUM-T) G-Seat motion cueing Probable future research, not yet defined The requirements expressed as user stories High level goals As a researcher I can add new flight models, measurement devices and cueing systems, so that the simulator is useful for my research. As a project leader I can use the simulator for commercial purposes without paying for any licenses, so that I can involve collaborators from industry environment. As a project leader I can use the simulator without relying on any external service so that I am sure the simulator will work in the future, regardless of an external company As a professor I can easily introduce students to the facility, so that they do practical projects. As a student I can use widespread solutions, standards and libraries, so that I get practical experience for my career after graduating. Conducting studies As a publication or thesis author I can easily gather all trial data into a single entity, so that they can be analyzed and presented in a written work. As a user conducting trials I can control the whole simulator on my own using a single application, so that there are less people to schedule for a trial with a test subject, and I can iterate on my own. As a human factors researcher I can see simulated view with an imperceptible delay, so that a human-in-the-loop piloting is viable. As a human factors researcher I can use the motion platform in closed loop mode, so that the simulation realism for the pilot is increased. Compatibility As a RPC project participant I can use Simulink and MBDyn models, so that I can reuse work already done in the project. As a human factors researcher I can connect the simulation infrastructure to other flight simulation software eg. FlightGear or X-Plane, so that off-the-shelf visual models of cockpit and aircraft can be used. As a user working on UAV support for HEMS missions (eg. MUM-T) I can communicate multiple aircraft (including unmanned) simultaneously, so that I can run shared simulations. As a user of UAVs I can connect PX4 simulation, so that I can collaborate with the drone lab and industrial partners. As a user of G-Seat I can connect the same simulator to moving platform and other cueing devices, so that a comparative study can be performed Developer experience As a simulator developer I can reuse common elements in different configurations, so that there is less work repeated to prepare the simulator for a new study. As a user adding a new device or flight model I can read a well-written and detailed documentation, so that the development process is feasible. Standard selection The most common feedback among reviewers was that using an estabilished solution is really important to not depend on the author to on-board every user. Also online search and chatbots will work much better. A minimal comparison was made between the suggested libraries, see the comm-library-comparison repository: MQTT Data Distribution Service ZeroMQ MAVLink The minimal prototype was implementing a trivial flight model using MATLAB Simulink and/or Python, and MAVLink proved to have by far the best support in the former.","title":"Rationale"},{"location":"rationale/#project-rationale","text":"The following section is mostly excerpts from the presentations done in the design phase of the system: Proposed options for the simulator architecture Simulator architecture comparison Standard selection for simulator integration","title":"Project rationale"},{"location":"rationale/#objectives","text":"Integrate available hardware and software resources to provide flight simulation for the following projects: Rotorcraft-Pilot Coupling Manned-UnManned Teaming (MUM-T) G-Seat motion cueing Probable future research, not yet defined The requirements expressed as user stories","title":"Objectives"},{"location":"rationale/#high-level-goals","text":"As a researcher I can add new flight models, measurement devices and cueing systems, so that the simulator is useful for my research. As a project leader I can use the simulator for commercial purposes without paying for any licenses, so that I can involve collaborators from industry environment. As a project leader I can use the simulator without relying on any external service so that I am sure the simulator will work in the future, regardless of an external company As a professor I can easily introduce students to the facility, so that they do practical projects. As a student I can use widespread solutions, standards and libraries, so that I get practical experience for my career after graduating.","title":"High level goals"},{"location":"rationale/#conducting-studies","text":"As a publication or thesis author I can easily gather all trial data into a single entity, so that they can be analyzed and presented in a written work. As a user conducting trials I can control the whole simulator on my own using a single application, so that there are less people to schedule for a trial with a test subject, and I can iterate on my own. As a human factors researcher I can see simulated view with an imperceptible delay, so that a human-in-the-loop piloting is viable. As a human factors researcher I can use the motion platform in closed loop mode, so that the simulation realism for the pilot is increased.","title":"Conducting studies"},{"location":"rationale/#compatibility","text":"As a RPC project participant I can use Simulink and MBDyn models, so that I can reuse work already done in the project. As a human factors researcher I can connect the simulation infrastructure to other flight simulation software eg. FlightGear or X-Plane, so that off-the-shelf visual models of cockpit and aircraft can be used. As a user working on UAV support for HEMS missions (eg. MUM-T) I can communicate multiple aircraft (including unmanned) simultaneously, so that I can run shared simulations. As a user of UAVs I can connect PX4 simulation, so that I can collaborate with the drone lab and industrial partners. As a user of G-Seat I can connect the same simulator to moving platform and other cueing devices, so that a comparative study can be performed","title":"Compatibility"},{"location":"rationale/#developer-experience","text":"As a simulator developer I can reuse common elements in different configurations, so that there is less work repeated to prepare the simulator for a new study. As a user adding a new device or flight model I can read a well-written and detailed documentation, so that the development process is feasible.","title":"Developer experience"},{"location":"rationale/#standard-selection","text":"The most common feedback among reviewers was that using an estabilished solution is really important to not depend on the author to on-board every user. Also online search and chatbots will work much better. A minimal comparison was made between the suggested libraries, see the comm-library-comparison repository: MQTT Data Distribution Service ZeroMQ MAVLink The minimal prototype was implementing a trivial flight model using MATLAB Simulink and/or Python, and MAVLink proved to have by far the best support in the former.","title":"Standard selection"},{"location":"manager/","text":"MARSH Manager The marsh-mgr program is a graphical application that serves as the central node in the simulator architecture. It is meant as a single tool to provide: Communicating data between simulator parts (nodes) Controlling the simulation execution and configuration Logging and replaying the simulation data Usage Start the application executable, either marsh-mgr or marsh-mgr.exe . If other nodes are running on different computers, configure \"manager address\" to IP address of the computer running the manager. Licenses The code for MARSH Manager is licensed under GNU General Public License v3.0 General application structure provided by Qt Framework under terms of the GNU Lesser General Public License (LGPL) Communication between components with MAVLink using generated code under MIT License","title":"MARSH Manager"},{"location":"manager/#marsh-manager","text":"The marsh-mgr program is a graphical application that serves as the central node in the simulator architecture. It is meant as a single tool to provide: Communicating data between simulator parts (nodes) Controlling the simulation execution and configuration Logging and replaying the simulation data","title":"MARSH Manager"},{"location":"manager/#usage","text":"Start the application executable, either marsh-mgr or marsh-mgr.exe . If other nodes are running on different computers, configure \"manager address\" to IP address of the computer running the manager.","title":"Usage"},{"location":"manager/#licenses","text":"The code for MARSH Manager is licensed under GNU General Public License v3.0 General application structure provided by Qt Framework under terms of the GNU Lesser General Public License (LGPL) Communication between components with MAVLink using generated code under MIT License","title":"Licenses"},{"location":"manager/contributing/","text":"Contributing Contributions to documentation and code are welcome. The repository is on GitHub as marsh-sim/marsh-manager , contributions are expected as Pull Requests to that repository. Prerequisites The development is done on Ubuntu 22.04 and Windows 10. The application will probably work on other platforms, but only those targets are supported. Git Python A C++ 17 compiler for the platform GCC for Linux MSVC for Windows (installed with Visual Studio) Qt for Open Source Development Qt version 6.5 Qt Creator Ubuntu only : Manually install XCB library: sudo apt install libxcb-cursor0 Optional, but recommended : Qt installs its own CMake, but you may need to install cmake-format manually, with pip install cmakelang or apt install cmake-format To conserve disk space you can select libraries actually used in the project, see the project's CMakeLists.txt , but it's possible in the future more will be used. Downloading the source code To use our own dialect, the project depends on a fork of MAVLink , included as a Git Submodule (which in turn has pymavlink inside). Open the folder where you want to keep the project code, and open it in terminal. To clone the repository with its inner modules, add the --recursive flag: git clone https://github.com/marsh-sim/marsh-manager.git --recursive cd marsh-manager Note If you didn't get the submodules during clone, or they changed to a different commit, you can update them with: git submodule update --init --recursive Building the project MAVLink library After downloading the project for the first time, or after changes in the MAVLink dialect, the communication library needs to be regenerated. A virtual environment is recommended to avoid mixing packages installed here with system packages. The following commands can be used for Linux: python3 -m venv venv source venv/bin/activate pip install -r requirements.txt For users on Windows, only the line to activate the virtual environment changes to: ./venv/Scripts/activate With the environment activated and all prerequisites installed, run the generator script: python scripts/update_mavlink.py Qt application Launch Qt Creator, click \"Open Project...\" on the left and open the CMakeLists.txt file in the marsh-manager directory. When shown the Configure window, mark a kit that starts with \"Desktop Qt 6.5\" and click \"Configure Project\" in the bottom right corner. The project can be compiled and optionally built using the buttons in the bottom left corner, or the \"Build\" menu on the top menu bar. This should rebuild all the necessary files, and optionally start the application and attach a debugger. Note The details of application version are generated by CMake based on last Git commit. You should fully run CMake after every commit. If you didn't change anything, run manually with: \"Build\" > \"Run CMake\" The application can be built in different modes, a short explanation quoted from Stack Overflow : Debug versions are usually slower, larger, and take up more RAM. They have debugging symbols, which make debugging possible and simpler. Release versions are stripped of all non-production information. In debug builds variables and memory are generally set to zero but in release this step is skipped to save time. Extra data is also added around objects and allocated memory as barriers to detect memory overwrites. In this specific project, building is noticeably faster for Debug builds. You can differentiate Debug build from Release by the window title, in which Debug builds also have the commit count on the end of version string after a + sign. Optional: Qt Creator configuration Qt Creator includes Vim mode (\"Edit\" > \"Preferences\" > \"FakeVim\"). Formatting To avoid \"noisy diff\" where changes are just formatting changes, it's recommended to enable format on save for all used kinds of source files: In window \"Edit\" > \"Preferences\": \"C++\" > \"Code Style\" \"Qt Quick\" > \"QML/JS Editing\" \"CMake\" > \"Formatter\"","title":"Contributing"},{"location":"manager/contributing/#contributing","text":"Contributions to documentation and code are welcome. The repository is on GitHub as marsh-sim/marsh-manager , contributions are expected as Pull Requests to that repository.","title":"Contributing"},{"location":"manager/contributing/#prerequisites","text":"The development is done on Ubuntu 22.04 and Windows 10. The application will probably work on other platforms, but only those targets are supported. Git Python A C++ 17 compiler for the platform GCC for Linux MSVC for Windows (installed with Visual Studio) Qt for Open Source Development Qt version 6.5 Qt Creator Ubuntu only : Manually install XCB library: sudo apt install libxcb-cursor0 Optional, but recommended : Qt installs its own CMake, but you may need to install cmake-format manually, with pip install cmakelang or apt install cmake-format To conserve disk space you can select libraries actually used in the project, see the project's CMakeLists.txt , but it's possible in the future more will be used.","title":"Prerequisites"},{"location":"manager/contributing/#downloading-the-source-code","text":"To use our own dialect, the project depends on a fork of MAVLink , included as a Git Submodule (which in turn has pymavlink inside). Open the folder where you want to keep the project code, and open it in terminal. To clone the repository with its inner modules, add the --recursive flag: git clone https://github.com/marsh-sim/marsh-manager.git --recursive cd marsh-manager Note If you didn't get the submodules during clone, or they changed to a different commit, you can update them with: git submodule update --init --recursive","title":"Downloading the source code"},{"location":"manager/contributing/#building-the-project","text":"","title":"Building the project"},{"location":"manager/contributing/#mavlink-library","text":"After downloading the project for the first time, or after changes in the MAVLink dialect, the communication library needs to be regenerated. A virtual environment is recommended to avoid mixing packages installed here with system packages. The following commands can be used for Linux: python3 -m venv venv source venv/bin/activate pip install -r requirements.txt For users on Windows, only the line to activate the virtual environment changes to: ./venv/Scripts/activate With the environment activated and all prerequisites installed, run the generator script: python scripts/update_mavlink.py","title":"MAVLink library"},{"location":"manager/contributing/#qt-application","text":"Launch Qt Creator, click \"Open Project...\" on the left and open the CMakeLists.txt file in the marsh-manager directory. When shown the Configure window, mark a kit that starts with \"Desktop Qt 6.5\" and click \"Configure Project\" in the bottom right corner. The project can be compiled and optionally built using the buttons in the bottom left corner, or the \"Build\" menu on the top menu bar. This should rebuild all the necessary files, and optionally start the application and attach a debugger. Note The details of application version are generated by CMake based on last Git commit. You should fully run CMake after every commit. If you didn't change anything, run manually with: \"Build\" > \"Run CMake\" The application can be built in different modes, a short explanation quoted from Stack Overflow : Debug versions are usually slower, larger, and take up more RAM. They have debugging symbols, which make debugging possible and simpler. Release versions are stripped of all non-production information. In debug builds variables and memory are generally set to zero but in release this step is skipped to save time. Extra data is also added around objects and allocated memory as barriers to detect memory overwrites. In this specific project, building is noticeably faster for Debug builds. You can differentiate Debug build from Release by the window title, in which Debug builds also have the commit count on the end of version string after a + sign.","title":"Qt application"},{"location":"manager/contributing/#optional-qt-creator-configuration","text":"Qt Creator includes Vim mode (\"Edit\" > \"Preferences\" > \"FakeVim\").","title":"Optional: Qt Creator configuration"},{"location":"manager/contributing/#formatting","text":"To avoid \"noisy diff\" where changes are just formatting changes, it's recommended to enable format on save for all used kinds of source files: In window \"Edit\" > \"Preferences\": \"C++\" > \"Code Style\" \"Qt Quick\" > \"QML/JS Editing\" \"CMake\" > \"Formatter\"","title":"Formatting"}]}