{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MARSH documentation! MARSH stands for Modular Architecture for Reconfigurable Simulation of Helicopters. It is a system for connecting loosely coupled programs into a research flight simulator. Acknowledgements This software is developed in Department of Aerospace Science and Technology of Politecnico di Milano.","title":"Home"},{"location":"#welcome-to-marsh-documentation","text":"MARSH stands for Modular Architecture for Reconfigurable Simulation of Helicopters. It is a system for connecting loosely coupled programs into a research flight simulator.","title":"Welcome to MARSH documentation!"},{"location":"#acknowledgements","text":"This software is developed in Department of Aerospace Science and Technology of Politecnico di Milano.","title":"Acknowledgements"},{"location":"documentation/","text":"Documentation Documentation for all projects under MARSH-Sim. All sources for these pages are in a GitHub repository . It is set up to automatically build the documentation on every commit on GitHub servers. The public version at marsh-sim.github.io is updated every time the main branch is changed, the actual files served are from gh-pages . Local installation The pages can be built into HTML and other formats using Python. A virtual environment is recommended to avoid mixing this documentation with system packages. The following commands can be used for Linux: python3 -m venv venv source venv/bin/activate pip install -r requirements.txt For users on Windows, only the line to activate the virtual environment changes to: ./venv/Scripts/activate Usage Once a local installation is complete, the pages can be re-built live with: mkdocs serve Contributing Content is written in Markdown and built to HTML with MkDocs . Markdown files should preferably be formatted with markdownlint extension for VS Code . The pages in the \"MAVLink Definitions\" section contain an initial part written normally, which is followed by automatically generated tables. The tables are (re-)generated with the update_mavlink_tables.py Python script, which should do the complete process of getting the definitions, running the original generator used for MAVLink documentation, and then replacing a relevant part of the pages. This script will be run when publicly deploying updates of the main branch. The generated content of the files in this repository should be commited when there are significant changes in the dialect, for convenience of offline development and reference. Recommended resources Make a Readme Readme Driven Development More Software Projects need Defenses of Design Defense of Design The goal for this setup of the documentation was to make it simple to update to users who come from aerospace engineering background and may not be familiar with the web technologies at large. A single documentation for all related projects was chosen to simplify navigation, allow easier cross linking between different concepts, and make it easier to search. The web pages are generated with MkDocs, because it uses Python which most colleagues already know. The alternatives used by related projects like GitBook (for MAVLink Dev Guide) are not free anymore, and VuePress (for PX4) requires NodeJS. Initially the more popular Sphinx was chosen, but didn't play nicely with Markdown files. This was deemed more important, since we already use it for a README.md file in every repository, is much more popular than reStructured Text, and has simpler syntax. Hosting the page through GitHub Pages and building through GitHub Actions mean there are no dedicated servers needed to be maintained by users. A fully open-source solution independent of a specific for-profit company would be preferred, but at least this can serve as introduction to contributing to other software outside of the University. An early goal for documentation of the dialect was to provide a user experience very close to using the standard messages. The files for MAVLink definitions are re-generated every time the page is published, but can also be updated in the repository. This was chosen to keep the repository simple (no submodules), and always up to date with the newest definitions in the fork. The generated content isn't ignored by git, so the results are the same when working with the repository offline. License Content in this documentation is licensed under Creative Commons Attribution 4.0","title":"Documentation"},{"location":"documentation/#documentation","text":"Documentation for all projects under MARSH-Sim. All sources for these pages are in a GitHub repository . It is set up to automatically build the documentation on every commit on GitHub servers. The public version at marsh-sim.github.io is updated every time the main branch is changed, the actual files served are from gh-pages .","title":"Documentation"},{"location":"documentation/#local-installation","text":"The pages can be built into HTML and other formats using Python. A virtual environment is recommended to avoid mixing this documentation with system packages. The following commands can be used for Linux: python3 -m venv venv source venv/bin/activate pip install -r requirements.txt For users on Windows, only the line to activate the virtual environment changes to: ./venv/Scripts/activate","title":"Local installation"},{"location":"documentation/#usage","text":"Once a local installation is complete, the pages can be re-built live with: mkdocs serve","title":"Usage"},{"location":"documentation/#contributing","text":"Content is written in Markdown and built to HTML with MkDocs . Markdown files should preferably be formatted with markdownlint extension for VS Code . The pages in the \"MAVLink Definitions\" section contain an initial part written normally, which is followed by automatically generated tables. The tables are (re-)generated with the update_mavlink_tables.py Python script, which should do the complete process of getting the definitions, running the original generator used for MAVLink documentation, and then replacing a relevant part of the pages. This script will be run when publicly deploying updates of the main branch. The generated content of the files in this repository should be commited when there are significant changes in the dialect, for convenience of offline development and reference.","title":"Contributing"},{"location":"documentation/#recommended-resources","text":"Make a Readme Readme Driven Development More Software Projects need Defenses of Design","title":"Recommended resources"},{"location":"documentation/#defense-of-design","text":"The goal for this setup of the documentation was to make it simple to update to users who come from aerospace engineering background and may not be familiar with the web technologies at large. A single documentation for all related projects was chosen to simplify navigation, allow easier cross linking between different concepts, and make it easier to search. The web pages are generated with MkDocs, because it uses Python which most colleagues already know. The alternatives used by related projects like GitBook (for MAVLink Dev Guide) are not free anymore, and VuePress (for PX4) requires NodeJS. Initially the more popular Sphinx was chosen, but didn't play nicely with Markdown files. This was deemed more important, since we already use it for a README.md file in every repository, is much more popular than reStructured Text, and has simpler syntax. Hosting the page through GitHub Pages and building through GitHub Actions mean there are no dedicated servers needed to be maintained by users. A fully open-source solution independent of a specific for-profit company would be preferred, but at least this can serve as introduction to contributing to other software outside of the University. An early goal for documentation of the dialect was to provide a user experience very close to using the standard messages. The files for MAVLink definitions are re-generated every time the page is published, but can also be updated in the repository. This was chosen to keep the repository simple (no submodules), and always up to date with the newest definitions in the fork. The generated content isn't ignored by git, so the results are the same when working with the repository offline.","title":"Defense of Design"},{"location":"documentation/#license","text":"Content in this documentation is licensed under Creative Commons Attribution 4.0","title":"License"},{"location":"node_development/","text":"Node development Every component of the simulator should be a separate node. The nodes have to publish a HEARTBEAT message according to Heartbeat/Connection Protocol . For any node-specific feature the workflow is as follows: Check if there is already a relevant convention for a feature in Microservices section of Dev Guide If nothing was found, search the Common Message Set Read documentation for the service: e.g. Parameter Protocol Read documentation for specific messages: e.g. SIM_STATE (#108)","title":"Node Development"},{"location":"node_development/#node-development","text":"Every component of the simulator should be a separate node. The nodes have to publish a HEARTBEAT message according to Heartbeat/Connection Protocol . For any node-specific feature the workflow is as follows: Check if there is already a relevant convention for a feature in Microservices section of Dev Guide If nothing was found, search the Common Message Set Read documentation for the service: e.g. Parameter Protocol Read documentation for specific messages: e.g. SIM_STATE (#108)","title":"Node development"},{"location":"rationale/","text":"Project rationale The following section is mostly excerpts from the presentations done in the design phase of the system: Proposed options for the simulator architecture Simulator architecture comparison Standard selection for simulator integration Objectives Integrate available hardware and software resources to provide flight simulation for the following projects: Rotorcraft-Pilot Coupling Manned-UnManned Teaming (MUM-T) G-Seat motion cueing Probable future research, not yet defined The requirements expressed as user stories High level goals As a researcher I can add new flight models, measurement devices and cueing systems, so that the simulator is useful for my research. As a project leader I can use the simulator for commercial purposes without paying for any licenses, so that I can involve collaborators from industry environment. As a project leader I can use the simulator without relying on any external service so that I am sure the simulator will work in the future, regardless of an external company As a professor I can easily introduce students to the facility, so that they do practical projects. As a student I can use widespread solutions, standards and libraries, so that I get practical experience for my career after graduating. Conducting studies As a publication or thesis author I can easily gather all trial data into a single entity, so that they can be analyzed and presented in a written work. As a user conducting trials I can control the whole simulator on my own using a single application, so that there are less people to schedule for a trial with a test subject, and I can iterate on my own. As a human factors researcher I can see simulated view with an imperceptible delay, so that a human-in-the-loop piloting is viable. As a human factors researcher I can use the motion platform in closed loop mode, so that the simulation realism for the pilot is increased. Compatibility As a RPC project participant I can use Simulink and MBDyn models, so that I can reuse work already done in the project. As a human factors researcher I can connect the simulation infrastructure to other flight simulation software eg. FlightGear or X-Plane, so that off-the-shelf visual models of cockpit and aircraft can be used. As a user working on UAV support for HEMS missions (eg. MUM-T) I can communicate multiple aircraft (including unmanned) simultaneously, so that I can run shared simulations. As a user of UAVs I can connect PX4 simulation, so that I can collaborate with the drone lab and industrial partners. As a user of G-Seat I can connect the same simulator to moving platform and other cueing devices, so that a comparative study can be performed Developer experience As a simulator developer I can reuse common elements in different configurations, so that there is less work repeated to prepare the simulator for a new study. As a user adding a new device or flight model I can read a well-written and detailed documentation, so that the development process is feasible. Standard selection The most common feedback among reviewers was that using an estabilished solution is really important to not depend on the author to on-board every user. Also online search and chatbots will work much better. A minimal comparison was made between the suggested libraries, see the comm-library-comparison repository: MQTT Data Distribution Service ZeroMQ MAVLink The minimal prototype was implementing a trivial flight model using MATLAB Simulink and/or Python, and MAVLink proved to have by far the best support in the former.","title":"Rationale"},{"location":"rationale/#project-rationale","text":"The following section is mostly excerpts from the presentations done in the design phase of the system: Proposed options for the simulator architecture Simulator architecture comparison Standard selection for simulator integration","title":"Project rationale"},{"location":"rationale/#objectives","text":"Integrate available hardware and software resources to provide flight simulation for the following projects: Rotorcraft-Pilot Coupling Manned-UnManned Teaming (MUM-T) G-Seat motion cueing Probable future research, not yet defined The requirements expressed as user stories","title":"Objectives"},{"location":"rationale/#high-level-goals","text":"As a researcher I can add new flight models, measurement devices and cueing systems, so that the simulator is useful for my research. As a project leader I can use the simulator for commercial purposes without paying for any licenses, so that I can involve collaborators from industry environment. As a project leader I can use the simulator without relying on any external service so that I am sure the simulator will work in the future, regardless of an external company As a professor I can easily introduce students to the facility, so that they do practical projects. As a student I can use widespread solutions, standards and libraries, so that I get practical experience for my career after graduating.","title":"High level goals"},{"location":"rationale/#conducting-studies","text":"As a publication or thesis author I can easily gather all trial data into a single entity, so that they can be analyzed and presented in a written work. As a user conducting trials I can control the whole simulator on my own using a single application, so that there are less people to schedule for a trial with a test subject, and I can iterate on my own. As a human factors researcher I can see simulated view with an imperceptible delay, so that a human-in-the-loop piloting is viable. As a human factors researcher I can use the motion platform in closed loop mode, so that the simulation realism for the pilot is increased.","title":"Conducting studies"},{"location":"rationale/#compatibility","text":"As a RPC project participant I can use Simulink and MBDyn models, so that I can reuse work already done in the project. As a human factors researcher I can connect the simulation infrastructure to other flight simulation software eg. FlightGear or X-Plane, so that off-the-shelf visual models of cockpit and aircraft can be used. As a user working on UAV support for HEMS missions (eg. MUM-T) I can communicate multiple aircraft (including unmanned) simultaneously, so that I can run shared simulations. As a user of UAVs I can connect PX4 simulation, so that I can collaborate with the drone lab and industrial partners. As a user of G-Seat I can connect the same simulator to moving platform and other cueing devices, so that a comparative study can be performed","title":"Compatibility"},{"location":"rationale/#developer-experience","text":"As a simulator developer I can reuse common elements in different configurations, so that there is less work repeated to prepare the simulator for a new study. As a user adding a new device or flight model I can read a well-written and detailed documentation, so that the development process is feasible.","title":"Developer experience"},{"location":"rationale/#standard-selection","text":"The most common feedback among reviewers was that using an estabilished solution is really important to not depend on the author to on-board every user. Also online search and chatbots will work much better. A minimal comparison was made between the suggested libraries, see the comm-library-comparison repository: MQTT Data Distribution Service ZeroMQ MAVLink The minimal prototype was implementing a trivial flight model using MATLAB Simulink and/or Python, and MAVLink proved to have by far the best support in the former.","title":"Standard selection"},{"location":"manager/","text":"MARSH Manager The marsh-mgr program is a graphical application that serves as the central node in the simulator architecture. It is meant as a single tool to provide: Communicating data between simulator parts (nodes) Controlling the simulation execution and configuration Logging and replaying the simulation data Usage Start the application executable, either marsh-mgr or marsh-mgr.exe . If other nodes are running on different computers, configure \"manager address\" to IP address of the computer running the manager. Licenses The code for MARSH Manager is licensed under GNU General Public License v3.0 General application structure provided by Qt Framework under terms of the GNU Lesser General Public License (LGPL) Communication between components with MAVLink using generated code under MIT License","title":"MARSH Manager"},{"location":"manager/#marsh-manager","text":"The marsh-mgr program is a graphical application that serves as the central node in the simulator architecture. It is meant as a single tool to provide: Communicating data between simulator parts (nodes) Controlling the simulation execution and configuration Logging and replaying the simulation data","title":"MARSH Manager"},{"location":"manager/#usage","text":"Start the application executable, either marsh-mgr or marsh-mgr.exe . If other nodes are running on different computers, configure \"manager address\" to IP address of the computer running the manager.","title":"Usage"},{"location":"manager/#licenses","text":"The code for MARSH Manager is licensed under GNU General Public License v3.0 General application structure provided by Qt Framework under terms of the GNU Lesser General Public License (LGPL) Communication between components with MAVLink using generated code under MIT License","title":"Licenses"},{"location":"manager/contributing/","text":"Contributing Contributions to documentation and code are welcome. The repository is on GitHub as marsh-sim/marsh-manager , contributions are expected as Pull Requests to that repository. Prerequisites The development is done on Ubuntu 22.04 and Windows 10. The application will probably work on other platforms, but only those targets are supported. Git Python A C++ 17 compiler for the platform GCC for Linux MSVC for Windows (installed with Visual Studio) Qt for Open Source Development Qt version 6.5 Qt Creator Ubuntu only : Manually install XCB library: sudo apt install libxcb-cursor0 Optional, but recommended : Qt installs its own CMake, but you may need to install cmake-format manually, with pip install cmakelang or apt install cmake-format To conserve disk space you can select libraries actually used in the project, see the project's CMakeLists.txt , but it's possible in the future more will be used. Downloading the source code To use our own dialect, the project depends on a fork of MAVLink , included as a Git Submodule (which in turn has pymavlink inside). Open the folder where you want to keep the project code, and open it in terminal. To clone the repository with its inner modules, add the --recursive flag: git clone https://github.com/marsh-sim/marsh-manager.git --recursive cd marsh-manager Note If you didn't get the submodules during clone, or they changed to a different commit, you can update them with: git submodule update --init --recursive Building the project MAVLink library After downloading the project for the first time, or after changes in the MAVLink dialect, the communication library needs to be regenerated. A virtual environment is recommended to avoid mixing packages installed here with system packages. The following commands can be used for Linux: python3 -m venv venv source venv/bin/activate pip install -r requirements.txt For users on Windows, only the line to activate the virtual environment changes to: ./venv/Scripts/activate With the environment activated and all prerequisites installed, run the generator script: python scripts/update_mavlink.py Qt application Launch Qt Creator, click \"Open Project...\" on the left and open the CMakeLists.txt file in the marsh-manager directory. When shown the Configure window, mark a kit that starts with \"Desktop Qt 6.5\" and click \"Configure Project\" in the bottom right corner. The project can be compiled and optionally built using the buttons in the bottom left corner, or the \"Build\" menu on the top menu bar. This should rebuild all the necessary files, and optionally start the application and attach a debugger. Note The details of application version are generated by CMake based on last Git commit. You should fully run CMake after every commit. If you didn't change anything, run manually with: \"Build\" > \"Run CMake\" The application can be built in different modes, a short explanation quoted from Stack Overflow : Debug versions are usually slower, larger, and take up more RAM. They have debugging symbols, which make debugging possible and simpler. Release versions are stripped of all non-production information. In debug builds variables and memory are generally set to zero but in release this step is skipped to save time. Extra data is also added around objects and allocated memory as barriers to detect memory overwrites. In this specific project, building is noticeably faster for Debug builds. You can differentiate Debug build from Release by the window title, in which Debug builds also have the commit count on the end of version string after a + sign. Optional: Qt Creator configuration Qt Creator includes Vim mode (\"Edit\" > \"Preferences\" > \"FakeVim\"). Formatting To avoid \"noisy diff\" where changes are just formatting changes, it's recommended to enable format on save for all used kinds of source files: In window \"Edit\" > \"Preferences\": \"C++\" > \"Code Style\" \"Qt Quick\" > \"QML/JS Editing\" \"CMake\" > \"Formatter\"","title":"Contributing"},{"location":"manager/contributing/#contributing","text":"Contributions to documentation and code are welcome. The repository is on GitHub as marsh-sim/marsh-manager , contributions are expected as Pull Requests to that repository.","title":"Contributing"},{"location":"manager/contributing/#prerequisites","text":"The development is done on Ubuntu 22.04 and Windows 10. The application will probably work on other platforms, but only those targets are supported. Git Python A C++ 17 compiler for the platform GCC for Linux MSVC for Windows (installed with Visual Studio) Qt for Open Source Development Qt version 6.5 Qt Creator Ubuntu only : Manually install XCB library: sudo apt install libxcb-cursor0 Optional, but recommended : Qt installs its own CMake, but you may need to install cmake-format manually, with pip install cmakelang or apt install cmake-format To conserve disk space you can select libraries actually used in the project, see the project's CMakeLists.txt , but it's possible in the future more will be used.","title":"Prerequisites"},{"location":"manager/contributing/#downloading-the-source-code","text":"To use our own dialect, the project depends on a fork of MAVLink , included as a Git Submodule (which in turn has pymavlink inside). Open the folder where you want to keep the project code, and open it in terminal. To clone the repository with its inner modules, add the --recursive flag: git clone https://github.com/marsh-sim/marsh-manager.git --recursive cd marsh-manager Note If you didn't get the submodules during clone, or they changed to a different commit, you can update them with: git submodule update --init --recursive","title":"Downloading the source code"},{"location":"manager/contributing/#building-the-project","text":"","title":"Building the project"},{"location":"manager/contributing/#mavlink-library","text":"After downloading the project for the first time, or after changes in the MAVLink dialect, the communication library needs to be regenerated. A virtual environment is recommended to avoid mixing packages installed here with system packages. The following commands can be used for Linux: python3 -m venv venv source venv/bin/activate pip install -r requirements.txt For users on Windows, only the line to activate the virtual environment changes to: ./venv/Scripts/activate With the environment activated and all prerequisites installed, run the generator script: python scripts/update_mavlink.py","title":"MAVLink library"},{"location":"manager/contributing/#qt-application","text":"Launch Qt Creator, click \"Open Project...\" on the left and open the CMakeLists.txt file in the marsh-manager directory. When shown the Configure window, mark a kit that starts with \"Desktop Qt 6.5\" and click \"Configure Project\" in the bottom right corner. The project can be compiled and optionally built using the buttons in the bottom left corner, or the \"Build\" menu on the top menu bar. This should rebuild all the necessary files, and optionally start the application and attach a debugger. Note The details of application version are generated by CMake based on last Git commit. You should fully run CMake after every commit. If you didn't change anything, run manually with: \"Build\" > \"Run CMake\" The application can be built in different modes, a short explanation quoted from Stack Overflow : Debug versions are usually slower, larger, and take up more RAM. They have debugging symbols, which make debugging possible and simpler. Release versions are stripped of all non-production information. In debug builds variables and memory are generally set to zero but in release this step is skipped to save time. Extra data is also added around objects and allocated memory as barriers to detect memory overwrites. In this specific project, building is noticeably faster for Debug builds. You can differentiate Debug build from Release by the window title, in which Debug builds also have the commit count on the end of version string after a + sign.","title":"Qt application"},{"location":"manager/contributing/#optional-qt-creator-configuration","text":"Qt Creator includes Vim mode (\"Edit\" > \"Preferences\" > \"FakeVim\").","title":"Optional: Qt Creator configuration"},{"location":"manager/contributing/#formatting","text":"To avoid \"noisy diff\" where changes are just formatting changes, it's recommended to enable format on save for all used kinds of source files: In window \"Edit\" > \"Preferences\": \"C++\" > \"Code Style\" \"Qt Quick\" > \"QML/JS Editing\" \"CMake\" > \"Formatter\"","title":"Formatting"},{"location":"mavlink/common/","text":"Subset of Common Set These messages are reproduced from the original documentation at mavlink.io \u2013 MAVLink Common Message Set . This is only a subset of the full list , including only messages used in the MARSH project, to make the protocol less overwhelming. Before designing a new message, first check the original documentation linked above. If you find a useful message in the common set, consider editing the list of identifiers used for generating this page. Generated on 2024-03-15T08:48:40 from commit a272aa9 MAVLink Include Files: standard.xml MAVLink Protocol Version The current MAVLink version is 2.3. The minor version numbers (after the dot) range from 1-255. This file has protocol dialect: 0. MAVLink Type Enumerations MAV_PARAM_TYPE [Enum] Specifies the datatype of a MAVLink parameter. Value Field Name Description 1 MAV_PARAM_TYPE_UINT8 8-bit unsigned integer 2 MAV_PARAM_TYPE_INT8 8-bit signed integer 3 MAV_PARAM_TYPE_UINT16 16-bit unsigned integer 4 MAV_PARAM_TYPE_INT16 16-bit signed integer 5 MAV_PARAM_TYPE_UINT32 32-bit unsigned integer 6 MAV_PARAM_TYPE_INT32 32-bit signed integer 7 MAV_PARAM_TYPE_UINT64 64-bit unsigned integer 8 MAV_PARAM_TYPE_INT64 64-bit signed integer 9 MAV_PARAM_TYPE_REAL32 32-bit floating-point 10 MAV_PARAM_TYPE_REAL64 64-bit floating-point MAVLink Commands ( MAV_CMD ) MAVLink commands ( MAV_CMD ) and messages are different! These commands define the values of up to 7 parameters that are packaged INSIDE specific messages used in the Mission Protocol and Command Protocol. Use commands for actions in missions or if you need acknowledgment and/or retry logic from a request. Otherwise use messages. Commands to be executed by the MAV. They can be executed on user request, or as part of a mission script. If the action is used in a mission, the parameter mapping to the waypoint/mission message is as follows: Param 1, Param 2, Param 3, Param 4, X: Param 5, Y:Param 6, Z:Param 7. This command list is similar what ARINC 424 is for commercial aircraft: A data format how to interpret waypoint/mission data. NaN and INT32_MAX may be used in float/integer params (respectively) to indicate optional/default values (e.g. to use the component's current yaw or latitude rather than a specific value). See https://mavlink.io/en/guide/xml_schema.html#MAV_CMD for information about the structure of the MAV_CMD entries MAVLink Messages PARAM_REQUEST_READ ( #20 ) [Message] Request to read the onboard parameter with the param_id string id. Onboard parameters are stored as key[const char*] -> value[float]. This allows to send a parameter to any other component (such as the GCS) without the need of previous knowledge of possible parameter names. Thus the same GCS can store different parameters for different autopilots. See also https://mavlink.io/en/services/parameter.html for a full documentation of QGroundControl and IMU code. Field Name Type Description target_system uint8_t System ID target_component uint8_t Component ID param_id char[16] Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string param_index int16_t Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored) PARAM_REQUEST_LIST ( #21 ) [Message] Request all parameters of this component. After this request, all parameters are emitted. The parameter microservice is documented at https://mavlink.io/en/services/parameter.html Field Name Type Description target_system uint8_t System ID target_component uint8_t Component ID PARAM_VALUE ( #22 ) [Message] Emit the value of a onboard parameter. The inclusion of param_count and param_index in the message allows the recipient to keep track of received parameters and allows him to re-request missing parameters after a loss or timeout. The parameter microservice is documented at https://mavlink.io/en/services/parameter.html Field Name Type Values Description param_id char[16] Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string param_value float Onboard parameter value param_type uint8_t MAV_PARAM_TYPE Onboard parameter type. param_count uint16_t Total number of onboard parameters param_index uint16_t Index of this onboard parameter PARAM_SET ( #23 ) [Message] Set a parameter value (write new value to permanent storage). The receiving component should acknowledge the new parameter value by broadcasting a PARAM_VALUE message (broadcasting ensures that multiple GCS all have an up-to-date list of all parameters). If the sending GCS did not receive a PARAM_VALUE within its timeout time, it should re-send the PARAM_SET message. The parameter microservice is documented at https://mavlink.io/en/services/parameter.html. PARAM_SET may also be called within the context of a transaction (started with MAV_CMD_PARAM_TRANSACTION ). Within a transaction the receiving component should respond with PARAM_ACK_TRANSACTION to the setter component (instead of broadcasting PARAM_VALUE ), and PARAM_SET should be re-sent if this is ACK not received. Field Name Type Values Description target_system uint8_t System ID target_component uint8_t Component ID param_id char[16] Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string param_value float Onboard parameter value param_type uint8_t MAV_PARAM_TYPE Onboard parameter type. SIM_STATE ( #108 ) [Message] Status of simulation environment, if used Field Name Type Units Description q1 float True attitude quaternion component 1, w (1 in null-rotation) q2 float True attitude quaternion component 2, x (0 in null-rotation) q3 float True attitude quaternion component 3, y (0 in null-rotation) q4 float True attitude quaternion component 4, z (0 in null-rotation) roll float Attitude roll expressed as Euler angles, not recommended except for human-readable outputs pitch float Attitude pitch expressed as Euler angles, not recommended except for human-readable outputs yaw float Attitude yaw expressed as Euler angles, not recommended except for human-readable outputs xacc float m/s/s X acceleration yacc float m/s/s Y acceleration zacc float m/s/s Z acceleration xgyro float rad/s Angular speed around X axis ygyro float rad/s Angular speed around Y axis zgyro float rad/s Angular speed around Z axis lat float deg Latitude (lower precision). Both this and the lat_int field should be set. lon float deg Longitude (lower precision). Both this and the lon_int field should be set. alt float m Altitude std_dev_horz float Horizontal position standard deviation std_dev_vert float Vertical position standard deviation vn float m/s True velocity in north direction in earth-fixed NED frame ve float m/s True velocity in east direction in earth-fixed NED frame vd float m/s True velocity in down direction in earth-fixed NED frame lat_int ** int32_t degE7 Latitude (higher precision). If 0, recipients should use the lat field value (otherwise this field is preferred). lon_int ** int32_t degE7 Longitude (higher precision). If 0, recipients should use the lon field value (otherwise this field is preferred). STATUSTEXT ( #253 ) [Message] Status text message. These messages are printed in yellow in the COMM console of QGroundControl. WARNING: They consume quite some bandwidth, so use only for important status and error messages. If implemented wisely, these messages are buffered on the MCU and sent only at a limited rate (e.g. 10 Hz). Field Name Type Values Description severity uint8_t MAV_SEVERITY Severity of status. Relies on the definitions within RFC-5424. text char[50] Status text message, without null termination character id ** uint16_t Unique (opaque) identifier for this statustext message. May be used to reassemble a logical long-statustext message from a sequence of chunks. A value of zero indicates this is the only chunk in the sequence and the message can be emitted immediately. chunk_seq ** uint8_t This chunk's sequence number; indexing is from zero. Any null character in the text field is taken to mean this was the last chunk.","title":"Subset of Common Set"},{"location":"mavlink/common/#subset-of-common-set","text":"These messages are reproduced from the original documentation at mavlink.io \u2013 MAVLink Common Message Set . This is only a subset of the full list , including only messages used in the MARSH project, to make the protocol less overwhelming. Before designing a new message, first check the original documentation linked above. If you find a useful message in the common set, consider editing the list of identifiers used for generating this page. Generated on 2024-03-15T08:48:40 from commit a272aa9 MAVLink Include Files: standard.xml","title":"Subset of Common Set"},{"location":"mavlink/marsh/","text":"MARSH Dialect This page documents all extensions to MAVLink that were required for the simulator. The definitions are in the marsh.xml file on the dialect branch in our fork of main MAVLink repository . All other projects need to generate and appropriate libraries, following the mavlink.io \u2013 Generating MAVLink Libraries documentation. When in need of a definition for a given functionality which is not covered here, first consult the Common Message Set, both our subset and full list . If a new definition is actually needed, follow the original guide on how to define MAVLink Messages & Enums Generated on 2024-03-15T08:48:41 from commit a272aa9 MAVLink Include Files: common.xml MAVLink Protocol Version The current MAVLink version is 2.1. The minor version numbers (after the dot) range from 1-255. This file has protocol dialect: 2. MAVLink Type Enumerations MARSH_COMPONENT [Enum] Component ids (values) for different nodes of the simulator network (flight model, controls, visualisation etc.). Components will always receive messages from the Manager relevant for their ID. Only the first component in a network with a given system ID and component ID will have its messages forwarded by the Manager, all other ones will only be treated as output (will be shadowed). This enum is a redefinition of MAV_COMP_ID_USER# messages from MAV_COMPONENT documented at https://mavlink.io/en/messages/common.html#MAV_COMPONENT Value Field Name Description 25 MARSH_COMP_ID_MANAGER The simulation manager responsible for routing packets between different nodes. Typically MARSH Manager, see https://marsh-sim.github.io/manager.html 26 MARSH_COMP_ID_FLIGHT_MODEL Component simulating flight dynamics of the aircraft. 27 MARSH_COMP_ID_CONTROLS Component providing pilot control inputs. 28 MARSH_COMP_ID_VISUALISATION Component showing the visual situation to the pilot. 29 MARSH_COMP_ID_INSTRUMENTS Component implementing pilot instrument panel. 30 MARSH_COMP_ID_MOVING_PLATFORM Component that moves the entire cockpit for motion cueing. 31 MARSH_COMP_ID_GSEAT Component for in-seat motion cueing. 32 MARSH_COMP_ID_EYE_TRACKER Component providing gaze data of pilot eyes. 33 MARSH_COMP_ID_CONTROL_LOADING Component measuring and actuating forces on pilot control inputs. MAVLink Commands ( MAV_CMD ) MAVLink commands ( MAV_CMD ) and messages are different! These commands define the values of up to 7 parameters that are packaged INSIDE specific messages used in the Mission Protocol and Command Protocol. Use commands for actions in missions or if you need acknowledgment and/or retry logic from a request. Otherwise use messages. MAVLink Messages","title":"MARSH Dialect"},{"location":"mavlink/marsh/#marsh-dialect","text":"This page documents all extensions to MAVLink that were required for the simulator. The definitions are in the marsh.xml file on the dialect branch in our fork of main MAVLink repository . All other projects need to generate and appropriate libraries, following the mavlink.io \u2013 Generating MAVLink Libraries documentation. When in need of a definition for a given functionality which is not covered here, first consult the Common Message Set, both our subset and full list . If a new definition is actually needed, follow the original guide on how to define MAVLink Messages & Enums Generated on 2024-03-15T08:48:41 from commit a272aa9 MAVLink Include Files: common.xml","title":"MARSH Dialect"},{"location":"mavlink/minimal/","text":"Minimal Set These are the messages which must be supported by any MAVLink system, reproduced from the original documentation at mavlink.io \u2013 MAVLink Minimal Set . The HEARTBEAT message is of special interest here, since it is used to communicate the node state to and from the Manager application. Generally the nodes in the simulator system are expected to send MAV_AUTOPILOT_INVALID. When choosing a component id, first see if there is a more specific one in MARSH_COMPONENT_ID , otherwise use the standard values here. Generated on 2024-03-15T08:48:41 from commit a272aa9 MAVLink Protocol Version The current MAVLink version is 2.3. The minor version numbers (after the dot) range from 1-255. MAVLink Type Enumerations MAV_AUTOPILOT [Enum] Micro air vehicle / autopilot classes. This identifies the individual model. Value Field Name Description 0 MAV_AUTOPILOT_GENERIC Generic autopilot, full support for everything 1 MAV_AUTOPILOT_RESERVED Reserved for future use. 2 MAV_AUTOPILOT_SLUGS SLUGS autopilot, http://slugsuav.soe.ucsc.edu 3 MAV_AUTOPILOT_ARDUPILOTMEGA ArduPilot - Plane/Copter/Rover/Sub/Tracker, https://ardupilot.org 4 MAV_AUTOPILOT_OPENPILOT OpenPilot, http://openpilot.org 5 MAV_AUTOPILOT_GENERIC_WAYPOINTS_ONLY Generic autopilot only supporting simple waypoints 6 MAV_AUTOPILOT_GENERIC_WAYPOINTS_AND_SIMPLE_NAVIGATION_ONLY Generic autopilot supporting waypoints and other simple navigation commands 7 MAV_AUTOPILOT_GENERIC_MISSION_FULL Generic autopilot supporting the full mission command set 8 MAV_AUTOPILOT_INVALID No valid autopilot, e.g. a GCS or other MAVLink component 9 MAV_AUTOPILOT_PPZ PPZ UAV - http://nongnu.org/paparazzi 10 MAV_AUTOPILOT_UDB UAV Dev Board 11 MAV_AUTOPILOT_FP FlexiPilot 12 MAV_AUTOPILOT_PX4 PX4 Autopilot - http://px4.io/ 13 MAV_AUTOPILOT_SMACCMPILOT SMACCMPilot - http://smaccmpilot.org 14 MAV_AUTOPILOT_AUTOQUAD AutoQuad -- http://autoquad.org 15 MAV_AUTOPILOT_ARMAZILA Armazila -- http://armazila.com 16 MAV_AUTOPILOT_AEROB Aerob -- http://aerob.ru 17 MAV_AUTOPILOT_ASLUAV ASLUAV autopilot -- http://www.asl.ethz.ch 18 MAV_AUTOPILOT_SMARTAP SmartAP Autopilot - http://sky-drones.com 19 MAV_AUTOPILOT_AIRRAILS AirRails - http://uaventure.com 20 MAV_AUTOPILOT_REFLEX Fusion Reflex - https://fusion.engineering MAV_TYPE [Enum] MAVLINK component type reported in HEARTBEAT message. Flight controllers must report the type of the vehicle on which they are mounted (e.g. MAV_TYPE_OCTOROTOR ). All other components must report a value appropriate for their type (e.g. a camera must use MAV_TYPE_CAMERA ). Value Field Name Description 0 MAV_TYPE_GENERIC Generic micro air vehicle 1 MAV_TYPE_FIXED_WING Fixed wing aircraft. 2 MAV_TYPE_QUADROTOR Quadrotor 3 MAV_TYPE_COAXIAL Coaxial helicopter 4 MAV_TYPE_HELICOPTER Normal helicopter with tail rotor. 5 MAV_TYPE_ANTENNA_TRACKER Ground installation 6 MAV_TYPE_GCS Operator control unit / ground control station 7 MAV_TYPE_AIRSHIP Airship, controlled 8 MAV_TYPE_FREE_BALLOON Free balloon, uncontrolled 9 MAV_TYPE_ROCKET Rocket 10 MAV_TYPE_GROUND_ROVER Ground rover 11 MAV_TYPE_SURFACE_BOAT Surface vessel, boat, ship 12 MAV_TYPE_SUBMARINE Submarine 13 MAV_TYPE_HEXAROTOR Hexarotor 14 MAV_TYPE_OCTOROTOR Octorotor 15 MAV_TYPE_TRICOPTER Tricopter 16 MAV_TYPE_FLAPPING_WING Flapping wing 17 MAV_TYPE_KITE Kite 18 MAV_TYPE_ONBOARD_CONTROLLER Onboard companion controller 19 MAV_TYPE_VTOL_TAILSITTER_DUOROTOR Two-rotor Tailsitter VTOL that additionally uses control surfaces in vertical operation. Note, value previously named MAV_TYPE_VTOL_DUOROTOR . 20 MAV_TYPE_VTOL_TAILSITTER_QUADROTOR Quad-rotor Tailsitter VTOL using a V-shaped quad config in vertical operation. Note: value previously named MAV_TYPE_VTOL_QUADROTOR . 21 MAV_TYPE_VTOL_TILTROTOR Tiltrotor VTOL. Fuselage and wings stay (nominally) horizontal in all flight phases. It able to tilt (some) rotors to provide thrust in cruise flight. 22 MAV_TYPE_VTOL_FIXEDROTOR VTOL with separate fixed rotors for hover and cruise flight. Fuselage and wings stay (nominally) horizontal in all flight phases. 23 MAV_TYPE_VTOL_TAILSITTER Tailsitter VTOL. Fuselage and wings orientation changes depending on flight phase: vertical for hover, horizontal for cruise. Use more specific VTOL MAV_TYPE_VTOL_TAILSITTER_DUOROTOR or MAV_TYPE_VTOL_TAILSITTER_QUADROTOR if appropriate. 24 MAV_TYPE_VTOL_TILTWING Tiltwing VTOL. Fuselage stays horizontal in all flight phases. The whole wing, along with any attached engine, can tilt between vertical and horizontal mode. 25 MAV_TYPE_VTOL_RESERVED5 VTOL reserved 5 26 MAV_TYPE_GIMBAL Gimbal 27 MAV_TYPE_ADSB ADSB system 28 MAV_TYPE_PARAFOIL Steerable, nonrigid airfoil 29 MAV_TYPE_DODECAROTOR Dodecarotor 30 MAV_TYPE_CAMERA Camera 31 MAV_TYPE_CHARGING_STATION Charging station 32 MAV_TYPE_FLARM FLARM collision avoidance system 33 MAV_TYPE_SERVO Servo 34 MAV_TYPE_ODID Open Drone ID. See https://mavlink.io/en/services/opendroneid.html. 35 MAV_TYPE_DECAROTOR Decarotor 36 MAV_TYPE_BATTERY Battery 37 MAV_TYPE_PARACHUTE Parachute 38 MAV_TYPE_LOG Log 39 MAV_TYPE_OSD OSD 40 MAV_TYPE_IMU IMU 41 MAV_TYPE_GPS GPS 42 MAV_TYPE_WINCH Winch 43 MAV_TYPE_GENERIC_MULTIROTOR Generic multirotor that does not fit into a specific type or whose type is unknown MAV_MODE_FLAG [Enum] These flags encode the MAV mode. Value Field Name Description 128 MAV_MODE_FLAG_SAFETY_ARMED 0b10000000 MAV safety set to armed. Motors are enabled / running / can start. Ready to fly. Additional note: this flag is to be ignore when sent in the command MAV_CMD_DO_SET_MODE and MAV_CMD_COMPONENT_ARM_DISARM shall be used instead. The flag can still be used to report the armed state. 64 MAV_MODE_FLAG_MANUAL_INPUT_ENABLED 0b01000000 remote control input is enabled. 32 MAV_MODE_FLAG_HIL_ENABLED 0b00100000 hardware in the loop simulation. All motors / actuators are blocked, but internal software is full operational. 16 MAV_MODE_FLAG_STABILIZE_ENABLED 0b00010000 system stabilizes electronically its attitude (and optionally position). It needs however further control inputs to move around. 8 MAV_MODE_FLAG_GUIDED_ENABLED 0b00001000 guided mode enabled, system flies waypoints / mission items. 4 MAV_MODE_FLAG_AUTO_ENABLED 0b00000100 autonomous mode enabled, system finds its own goal positions. Guided flag can be set or not, depends on the actual implementation. 2 MAV_MODE_FLAG_TEST_ENABLED 0b00000010 system has a test mode enabled. This flag is intended for temporary system tests and should not be used for stable implementations. 1 MAV_MODE_FLAG_CUSTOM_MODE_ENABLED 0b00000001 Reserved for future use. MAV_MODE_FLAG_DECODE_POSITION [Enum] These values encode the bit positions of the decode position. These values can be used to read the value of a flag bit by combining the base_mode variable with AND with the flag position value. The result will be either 0 or 1, depending on if the flag is set or not. Value Field Name Description 128 MAV_MODE_FLAG_DECODE_POSITION_SAFETY First bit: 10000000 64 MAV_MODE_FLAG_DECODE_POSITION_MANUAL Second bit: 01000000 32 MAV_MODE_FLAG_DECODE_POSITION_HIL Third bit: 00100000 16 MAV_MODE_FLAG_DECODE_POSITION_STABILIZE Fourth bit: 00010000 8 MAV_MODE_FLAG_DECODE_POSITION_GUIDED Fifth bit: 00001000 4 MAV_MODE_FLAG_DECODE_POSITION_AUTO Sixth bit: 00000100 2 MAV_MODE_FLAG_DECODE_POSITION_TEST Seventh bit: 00000010 1 MAV_MODE_FLAG_DECODE_POSITION_CUSTOM_MODE Eighth bit: 00000001 MAV_STATE [Enum] Value Field Name Description 0 MAV_STATE_UNINIT Uninitialized system, state is unknown. 1 MAV_STATE_BOOT System is booting up. 2 MAV_STATE_CALIBRATING System is calibrating and not flight-ready. 3 MAV_STATE_STANDBY System is grounded and on standby. It can be launched any time. 4 MAV_STATE_ACTIVE System is active and might be already airborne. Motors are engaged. 5 MAV_STATE_CRITICAL System is in a non-normal flight mode (failsafe). It can however still navigate. 6 MAV_STATE_EMERGENCY System is in a non-normal flight mode (failsafe). It lost control over parts or over the whole airframe. It is in mayday and going down. 7 MAV_STATE_POWEROFF System just initialized its power-down sequence, will shut down now. 8 MAV_STATE_FLIGHT_TERMINATION System is terminating itself (failsafe or commanded). MAV_COMPONENT [Enum] Component ids (values) for the different types and instances of onboard hardware/software that might make up a MAVLink system (autopilot, cameras, servos, GPS systems, avoidance systems etc.). Components must use the appropriate ID in their source address when sending messages. Components can also use IDs to determine if they are the intended recipient of an incoming message. The MAV_COMP_ID_ALL value is used to indicate messages that must be processed by all components. When creating new entries, components that can have multiple instances (e.g. cameras, servos etc.) should be allocated sequential values. An appropriate number of values should be left free after these components to allow the number of instances to be expanded. Value Field Name Description 0 MAV_COMP_ID_ALL Target id (target_component) used to broadcast messages to all components of the receiving system. Components should attempt to process messages with this component ID and forward to components on any other interfaces. Note: This is not a valid *source* component id for a message. 1 MAV_COMP_ID_AUTOPILOT1 System flight controller component (\"autopilot\"). Only one autopilot is expected in a particular system. 25 MAV_COMP_ID_USER1 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 26 MAV_COMP_ID_USER2 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 27 MAV_COMP_ID_USER3 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 28 MAV_COMP_ID_USER4 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 29 MAV_COMP_ID_USER5 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 30 MAV_COMP_ID_USER6 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 31 MAV_COMP_ID_USER7 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 32 MAV_COMP_ID_USER8 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 33 MAV_COMP_ID_USER9 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 34 MAV_COMP_ID_USER10 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 35 MAV_COMP_ID_USER11 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 36 MAV_COMP_ID_USER12 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 37 MAV_COMP_ID_USER13 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 38 MAV_COMP_ID_USER14 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 39 MAV_COMP_ID_USER15 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 40 MAV_COMP_ID_USER16 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 41 MAV_COMP_ID_USER17 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 42 MAV_COMP_ID_USER18 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 43 MAV_COMP_ID_USER19 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 44 MAV_COMP_ID_USER20 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 45 MAV_COMP_ID_USER21 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 46 MAV_COMP_ID_USER22 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 47 MAV_COMP_ID_USER23 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 48 MAV_COMP_ID_USER24 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 49 MAV_COMP_ID_USER25 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 50 MAV_COMP_ID_USER26 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 51 MAV_COMP_ID_USER27 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 52 MAV_COMP_ID_USER28 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 53 MAV_COMP_ID_USER29 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 54 MAV_COMP_ID_USER30 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 55 MAV_COMP_ID_USER31 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 56 MAV_COMP_ID_USER32 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 57 MAV_COMP_ID_USER33 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 58 MAV_COMP_ID_USER34 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 59 MAV_COMP_ID_USER35 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 60 MAV_COMP_ID_USER36 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 61 MAV_COMP_ID_USER37 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 62 MAV_COMP_ID_USER38 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 63 MAV_COMP_ID_USER39 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 64 MAV_COMP_ID_USER40 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 65 MAV_COMP_ID_USER41 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 66 MAV_COMP_ID_USER42 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 67 MAV_COMP_ID_USER43 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 68 MAV_COMP_ID_TELEMETRY_RADIO Telemetry radio (e.g. SiK radio, or other component that emits RADIO_STATUS messages). 69 MAV_COMP_ID_USER45 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 70 MAV_COMP_ID_USER46 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 71 MAV_COMP_ID_USER47 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 72 MAV_COMP_ID_USER48 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 73 MAV_COMP_ID_USER49 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 74 MAV_COMP_ID_USER50 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 75 MAV_COMP_ID_USER51 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 76 MAV_COMP_ID_USER52 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 77 MAV_COMP_ID_USER53 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 78 MAV_COMP_ID_USER54 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 79 MAV_COMP_ID_USER55 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 80 MAV_COMP_ID_USER56 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 81 MAV_COMP_ID_USER57 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 82 MAV_COMP_ID_USER58 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 83 MAV_COMP_ID_USER59 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 84 MAV_COMP_ID_USER60 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 85 MAV_COMP_ID_USER61 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 86 MAV_COMP_ID_USER62 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 87 MAV_COMP_ID_USER63 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 88 MAV_COMP_ID_USER64 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 89 MAV_COMP_ID_USER65 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 90 MAV_COMP_ID_USER66 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 91 MAV_COMP_ID_USER67 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 92 MAV_COMP_ID_USER68 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 93 MAV_COMP_ID_USER69 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 94 MAV_COMP_ID_USER70 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 95 MAV_COMP_ID_USER71 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 96 MAV_COMP_ID_USER72 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 97 MAV_COMP_ID_USER73 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 98 MAV_COMP_ID_USER74 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 99 MAV_COMP_ID_USER75 Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. 100 MAV_COMP_ID_CAMERA Camera #1. 101 MAV_COMP_ID_CAMERA2 Camera #2. 102 MAV_COMP_ID_CAMERA3 Camera #3. 103 MAV_COMP_ID_CAMERA4 Camera #4. 104 MAV_COMP_ID_CAMERA5 Camera #5. 105 MAV_COMP_ID_CAMERA6 Camera #6. 140 MAV_COMP_ID_SERVO1 Servo #1. 141 MAV_COMP_ID_SERVO2 Servo #2. 142 MAV_COMP_ID_SERVO3 Servo #3. 143 MAV_COMP_ID_SERVO4 Servo #4. 144 MAV_COMP_ID_SERVO5 Servo #5. 145 MAV_COMP_ID_SERVO6 Servo #6. 146 MAV_COMP_ID_SERVO7 Servo #7. 147 MAV_COMP_ID_SERVO8 Servo #8. 148 MAV_COMP_ID_SERVO9 Servo #9. 149 MAV_COMP_ID_SERVO10 Servo #10. 150 MAV_COMP_ID_SERVO11 Servo #11. 151 MAV_COMP_ID_SERVO12 Servo #12. 152 MAV_COMP_ID_SERVO13 Servo #13. 153 MAV_COMP_ID_SERVO14 Servo #14. 154 MAV_COMP_ID_GIMBAL Gimbal #1. 155 MAV_COMP_ID_LOG Logging component. 156 MAV_COMP_ID_ADSB Automatic Dependent Surveillance-Broadcast (ADS-B) component. 157 MAV_COMP_ID_OSD On Screen Display (OSD) devices for video links. 158 MAV_COMP_ID_PERIPHERAL Generic autopilot peripheral component ID. Meant for devices that do not implement the parameter microservice. 159 MAV_COMP_ID_QX1_GIMBAL DEPRECATED: Replaced by MAV_COMP_ID_GIMBAL (2018-11). All gimbals should use MAV_COMP_ID_GIMBAL . Gimbal ID for QX1. 160 MAV_COMP_ID_FLARM FLARM collision alert component. 161 MAV_COMP_ID_PARACHUTE Parachute component. 169 MAV_COMP_ID_WINCH Winch component. 171 MAV_COMP_ID_GIMBAL2 Gimbal #2. 172 MAV_COMP_ID_GIMBAL3 Gimbal #3. 173 MAV_COMP_ID_GIMBAL4 Gimbal #4 174 MAV_COMP_ID_GIMBAL5 Gimbal #5. 175 MAV_COMP_ID_GIMBAL6 Gimbal #6. 180 MAV_COMP_ID_BATTERY Battery #1. 181 MAV_COMP_ID_BATTERY2 Battery #2. 189 MAV_COMP_ID_MAVCAN CAN over MAVLink client. 190 MAV_COMP_ID_MISSIONPLANNER Component that can generate/supply a mission flight plan (e.g. GCS or developer API). 191 MAV_COMP_ID_ONBOARD_COMPUTER Component that lives on the onboard computer (companion computer) and has some generic functionalities, such as settings system parameters and monitoring the status of some processes that don't directly speak mavlink and so on. 192 MAV_COMP_ID_ONBOARD_COMPUTER2 Component that lives on the onboard computer (companion computer) and has some generic functionalities, such as settings system parameters and monitoring the status of some processes that don't directly speak mavlink and so on. 193 MAV_COMP_ID_ONBOARD_COMPUTER3 Component that lives on the onboard computer (companion computer) and has some generic functionalities, such as settings system parameters and monitoring the status of some processes that don't directly speak mavlink and so on. 194 MAV_COMP_ID_ONBOARD_COMPUTER4 Component that lives on the onboard computer (companion computer) and has some generic functionalities, such as settings system parameters and monitoring the status of some processes that don't directly speak mavlink and so on. 195 MAV_COMP_ID_PATHPLANNER Component that finds an optimal path between points based on a certain constraint (e.g. minimum snap, shortest path, cost, etc.). 196 MAV_COMP_ID_OBSTACLE_AVOIDANCE Component that plans a collision free path between two points. 197 MAV_COMP_ID_VISUAL_INERTIAL_ODOMETRY Component that provides position estimates using VIO techniques. 198 MAV_COMP_ID_PAIRING_MANAGER Component that manages pairing of vehicle and GCS. 200 MAV_COMP_ID_IMU Inertial Measurement Unit (IMU) #1. 201 MAV_COMP_ID_IMU_2 Inertial Measurement Unit (IMU) #2. 202 MAV_COMP_ID_IMU_3 Inertial Measurement Unit (IMU) #3. 220 MAV_COMP_ID_GPS GPS #1. 221 MAV_COMP_ID_GPS2 GPS #2. 236 MAV_COMP_ID_ODID_TXRX_1 Open Drone ID transmitter/receiver (Bluetooth/WiFi/Internet). 237 MAV_COMP_ID_ODID_TXRX_2 Open Drone ID transmitter/receiver (Bluetooth/WiFi/Internet). 238 MAV_COMP_ID_ODID_TXRX_3 Open Drone ID transmitter/receiver (Bluetooth/WiFi/Internet). 240 MAV_COMP_ID_UDP_BRIDGE Component to bridge MAVLink to UDP (i.e. from a UART). 241 MAV_COMP_ID_UART_BRIDGE Component to bridge to UART (i.e. from UDP). 242 MAV_COMP_ID_TUNNEL_NODE Component handling TUNNEL messages (e.g. vendor specific GUI of a component). 250 MAV_COMP_ID_SYSTEM_CONTROL DEPRECATED: Replaced by MAV_COMP_ID_ALL (2018-11). System control does not require a separate component ID. Instead, system commands should be sent with target_component=MAV_COMP_ID_ALL allowing the target component to use any appropriate component id. Deprecated, don't use. Component for handling system messages (e.g. to ARM, takeoff, etc.). MAVLink Commands ( MAV_CMD ) MAVLink commands ( MAV_CMD ) and messages are different! These commands define the values of up to 7 parameters that are packaged INSIDE specific messages used in the Mission Protocol and Command Protocol. Use commands for actions in missions or if you need acknowledgment and/or retry logic from a request. Otherwise use messages. MAVLink Messages HEARTBEAT ( #0 ) [Message] The heartbeat message shows that a system or component is present and responding. The type and autopilot fields (along with the message component id), allow the receiving system to treat further messages from this system appropriately (e.g. by laying out the user interface based on the autopilot). This microservice is documented at https://mavlink.io/en/services/heartbeat.html Field Name Type Values Description type uint8_t MAV_TYPE Vehicle or component type. For a flight controller component the vehicle type (quadrotor, helicopter, etc.). For other components the component type (e.g. camera, gimbal, etc.). This should be used in preference to component id for identifying the component type. autopilot uint8_t MAV_AUTOPILOT Autopilot type / class. Use MAV_AUTOPILOT_INVALID for components that are not flight controllers. base_mode uint8_t MAV_MODE_FLAG System mode bitmap. custom_mode uint32_t A bitfield for use for autopilot-specific flags system_status uint8_t MAV_STATE System status flag. mavlink_version uint8_t_mavlink_version MAVLink version, not writable by user, gets added by protocol because of magic data type: uint8_t_mavlink_version PROTOCOL_VERSION ( #300 ) WORK IN PROGRESS: Do not use in stable production environments (it may change). [Message] (MAVLink 2) Version and capability of protocol version. This message can be requested with MAV_CMD_REQUEST_MESSAGE and is used as part of the handshaking to establish which MAVLink version should be used on the network. Every node should respond to a request for PROTOCOL_VERSION to enable the handshaking. Library implementers should consider adding this into the default decoding state machine to allow the protocol core to respond directly. Field Name Type Description version uint16_t Currently active MAVLink version number * 100: v1.0 is 100, v2.0 is 200, etc. min_version uint16_t Minimum MAVLink version supported max_version uint16_t Maximum MAVLink version supported (set to the same value as version by default) spec_version_hash uint8_t[8] The first 8 bytes (not characters printed in hex!) of the git hash. library_version_hash uint8_t[8] The first 8 bytes (not characters printed in hex!) of the git hash.","title":"Minimal Set"},{"location":"mavlink/minimal/#minimal-set","text":"These are the messages which must be supported by any MAVLink system, reproduced from the original documentation at mavlink.io \u2013 MAVLink Minimal Set . The HEARTBEAT message is of special interest here, since it is used to communicate the node state to and from the Manager application. Generally the nodes in the simulator system are expected to send MAV_AUTOPILOT_INVALID. When choosing a component id, first see if there is a more specific one in MARSH_COMPONENT_ID , otherwise use the standard values here. Generated on 2024-03-15T08:48:41 from commit a272aa9","title":"Minimal Set"}]}